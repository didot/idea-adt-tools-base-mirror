/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY codergen. EDIT WITH CARE.
 */
package com.android.tools.rpclib.any;

import com.android.tools.rpclib.binary.*;
import com.android.tools.rpclib.schema.Type;
import org.jetbrains.annotations.NotNull;

import java.io.IOException;

public final class AnyType extends Type {
    @NotNull
    @Override
    public String getName() {
        return "any";
    }

    public static Box box(Object value) {
        if (value instanceof BinaryObject) {
            return new ObjectBox().setValue((BinaryObject)value);
        }
        if (value instanceof Boolean) {
            return new Bool().setValue((Boolean)value);
        }
        // TODO: signed/unsigned variants are indistinguishable in java
        if (value instanceof Byte) {
            return new Uint8().setValue((Byte)value);
        }
        if (value instanceof Short) {
            return new Uint16().setValue((Short)value);
        }
        if (value instanceof Integer) {
            return new Uint32().setValue((Integer)value);
        }
        if (value instanceof Long) {
            return new Uint64().setValue((Long)value);
        }
        if (value instanceof Float) {
            return new Float32().setValue((Float)value);
        }
        if (value instanceof Double) {
            return new Float64().setValue((Double)value);
        }
        if (value instanceof String) {
            return new StringBox().setValue((String)value);
        }
        // TODO: slice types
        return null;
    }

    public static Object unbox(Box value) {
        return value.unwrap();
    }

    @Override
    public void encodeValue(@NotNull Encoder e, Object value) throws IOException {
        e.variant(box(value));
    }

    @Override
    public Object decodeValue(@NotNull Decoder d) throws IOException {
        return unbox((Box)d.variant());
    }

    //<<<Start:Java.ClassBody:1>>>

    // Constructs a default-initialized {@link AnyType}.
    public AnyType() {}


    @Override @NotNull
    public BinaryClass klass() { return Klass.INSTANCE; }

    private static final byte[] IDBytes = {-52, 89, 34, -71, 23, 109, 126, -62, -47, 11, -23, 57, 28, 95, 3, 56, -68, 37, -61, -38, };
    public static final BinaryID ID = new BinaryID(IDBytes);

    static {
        Namespace.register(ID, Klass.INSTANCE);
    }
    public static void register() {}
    //<<<End:Java.ClassBody:1>>>
    public enum Klass implements BinaryClass {
        //<<<Start:Java.KlassBody:2>>>
        INSTANCE;

        @Override @NotNull
        public BinaryID id() { return ID; }

        @Override @NotNull
        public BinaryObject create() { return new AnyType(); }

        @Override
        public void encode(@NotNull Encoder e, BinaryObject obj) throws IOException {
            AnyType o = (AnyType)obj;
        }

        @Override
        public void decode(@NotNull Decoder d, BinaryObject obj) throws IOException {
            AnyType o = (AnyType)obj;
        }
        //<<<End:Java.KlassBody:2>>>
    }
}
